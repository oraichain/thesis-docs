{
  "openapi": "3.1.0",
  "info": {
    "title": "Thesis.io APIs",
    "description": "Thesis.io provides comprehensive AI-powered research and conversation APIs for DeFi analysis and blockchain research. Create conversations with customizable research modes including chat, deep research, and specialized DeFi tools for real-time market analysis. Join existing conversations via streaming endpoints to participate in collaborative research sessions with advanced AI agents.",
    "version": "0.32.1"
  },
  "paths": {
    "/api/v1/integration/conversations": {
      "post": {
        "tags": ["conversations", "conversations"],
        "summary": "Create New Conversation",
        "description": "Creates a new conversation with customizable research mode, system prompt, and space association. Supports follow-up threads and MCP tool configuration.",
        "operationId": "integration_new_conversation_api_v1_integration_conversations_post",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Create new conversation",
            "source": "curl -X POST 'https://app-be.thesis.io/api/v1/integration/conversations' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"initial_user_msg\": \"Whats the new DeFi meta recently that I can ape in?\",\n    \"research_mode\": \"deep_research\",\n    \"system_prompt\": \"You are a DeFi gigachad who is always ahead of the new DeFi meta.\"\n  }'"
          },
          {
            "lang": "python",
            "label": "Create new conversation",
            "source": "import requests\n\nurl = 'https://app-be.thesis.io/api/v1/integration/conversations'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n}\ndata = {\n    'initial_user_msg': 'Whats the new DeFi meta recently that I can ape in?',\n    'research_mode': 'deep_research',\n    'system_prompt': 'You are a DeFi gigachad who is always ahead of the new DeFi meta.'\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Create new conversation",
            "source": "const response = await fetch('https://app-be.thesis.io/api/v1/integration/conversations', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    initial_user_msg: 'What\\'s the new DeFi meta recently that I can ape in?',\n    research_mode: 'deep_research',\n    space_id: 123,\n    system_prompt: 'You are a DeFi gigachad who\\'s always ahead of the new DeFi meta.'\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewConversationIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication token missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openhands__server__routes__integration__conversation__FastAPIUnauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integration/conversations/{conversation_id}": {
      "get": {
        "tags": ["conversations", "conversations"],
        "summary": "Get Conversation Details",
        "description": "Retrieves comprehensive details for a specific conversation including metadata, event history, and current status. Returns full conversation context with all messages and interactions.",
        "operationId": "integration_get_conversation_api_v1_integration_conversations__conversation_id__get",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Get conversation details",
            "source": "curl -X GET 'https://app-be.thesis.io/api/v1/integration/conversations/conv_abc123def456' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN'"
          },
          {
            "lang": "python",
            "label": "Get conversation details",
            "source": "import requests\n\nconversation_id = 'conv_abc123def456'\nurl = f'https://app-be.thesis.io/api/v1/integration/conversations/{conversation_id}'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Get conversation details",
            "source": "const conversationId = 'conv_abc123def456';\nconst response = await fetch(`https://app-be.thesis.io/api/v1/integration/conversations/${conversationId}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to access conversation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openhands__server__routes__integration__conversation__FastAPIUnauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integration/conversations/join-conversation": {
      "post": {
        "tags": ["conversations", "conversations"],
        "summary": "Join Existing Conversation",
        "description": "Join an existing conversation using conversation ID and API key authentication. Allows real-time participation in ongoing conversations with streaming responses. The user prompt becomes the next message sent to the AI.\n\n**Important for streaming:** Use the `--no-buffer` flag with cURL to enable real-time streaming output.",
        "operationId": "join_conversation_api_v1_integration_conversations_join_conversation_post",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Join existing conversation",
            "source": "curl -X POST 'https://app-be.thesis.io/api/v1/integration/conversations/join-conversation' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"conversation_id\": \"conv_abc123def456\",\n    \"system_prompt\": \"Continue as an expert software architect\",\n    \"user_prompt\": \"Please review the code we discussed earlier\",\n    \"research_mode\": \"deep_research\"\n  }' --no-buffer"
          },
          {
            "lang": "python",
            "label": "Join existing conversation",
            "source": "import requests\n\nurl = 'https://app-be.thesis.io/api/v1/integration/conversations/join-conversation'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n}\ndata = {\n    'conversation_id': 'conv_abc123def456',\n    'system_prompt': 'Continue as an expert software architect',\n    'user_prompt': 'Please review the code we discussed earlier',\n    'research_mode': 'deep_research'\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Join existing conversation",
            "source": "const response = await fetch('https://app-be.thesis.io/api/v1/integration/conversations/join-conversation', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    conversation_id: 'conv_abc123def456',\n    system_prompt: 'Continue as an expert software architect',\n    user_prompt: 'Please review the code we discussed earlier',\n    research_mode: 'deep_research'\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinConversationIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully joined conversation with streaming response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream with real-time conversation updates. Events are serialized using event_to_dict() and sent as SSE format.",
                  "examples": [
                    {
                      "type": "oh_event",
                      "data": {
                        "id": 1,
                        "timestamp": "2024-01-15T10:45:00.123Z",
                        "source": "user",
                        "message": "Please review this code",
                        "action": "message",
                        "args": {
                          "content": "Please review this code",
                          "wait_for_response": false
                        }
                      }
                    },
                    {
                      "type": "oh_event",
                      "data": {
                        "id": 2,
                        "timestamp": "2024-01-15T10:45:30.456Z",
                        "source": "agent",
                        "message": "I'll analyze the code for you...",
                        "action": "message",
                        "args": {
                          "content": "I'll analyze the code for you. Let me start by examining the structure...",
                          "wait_for_response": false
                        }
                      }
                    },
                    {
                      "type": "oh_event",
                      "data": {
                        "id": 3,
                        "timestamp": "2024-01-15T10:45:35.789Z",
                        "source": "agent",
                        "observation": "agent_state_changed",
                        "content": "",
                        "extras": {
                          "agent_state": "RUNNING",
                          "reason": "Starting code analysis"
                        },
                        "success": true
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields (conversation_id, system_prompt, research_mode, or user_prompt)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing Bearer token in Authorization header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openhands__server__routes__integration__conversation__FastAPIUnauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Failed to establish streaming connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integration/spaces": {
      "get": {
        "tags": ["spaces", "spaces"],
        "summary": "Get List of Spaces",
        "description": "Retrieves a paginated list of spaces accessible to the authenticated user. Supports filtering by title and pagination with offset/limit parameters.",
        "operationId": "get_list_space_api_v1_integration_spaces_get",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Get list of spaces",
            "source": "curl -X GET 'https://app-be.thesis.io/api/v1/integration/spaces?offset=0&limit=10&title=AI%20Research' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN'"
          },
          {
            "lang": "python",
            "label": "Get list of spaces",
            "source": "import requests\n\nurl = 'https://app-be.thesis.io/api/v1/integration/spaces'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n}\nparams = {\n    'offset': 0,\n    'limit': 10,\n    'title': 'AI Research'\n}\n\nresponse = requests.get(url, headers=headers, params=params)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Get list of spaces",
            "source": "const params = new URLSearchParams({\n  offset: '0',\n  limit: '10',\n  title: 'AI Research'\n});\n\nconst response = await fetch(`https://app-be.thesis.io/api/v1/integration/spaces?${params}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Title"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Spaces retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openhands__server__routes__integration__space__FastAPIUnauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integration/spaces/{space_id}": {
      "get": {
        "tags": ["spaces", "spaces"],
        "summary": "Get Space Details",
        "description": "Retrieves comprehensive details for a specific space including metadata, member information, and recent activity. Requires appropriate access permissions.",
        "operationId": "get_space_detail_api_v1_integration_spaces__space_id__get",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Get space details",
            "source": "curl -X GET 'https://app-be.thesis.io/api/v1/integration/spaces/space_123' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN'"
          },
          {
            "lang": "python",
            "label": "Get space details",
            "source": "import requests\n\nspace_id = 'space_123'\nurl = f'https://app-be.thesis.io/api/v1/integration/spaces/{space_id}'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Get space details",
            "source": "const spaceId = 'space_123';\nconst response = await fetch(`https://app-be.thesis.io/api/v1/integration/spaces/${spaceId}`, {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Space Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Space details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openhands__server__routes__integration__space__FastAPIUnauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Space not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integration/spaces/{space_id}/sections": {
      "get": {
        "tags": ["spaces", "spaces"],
        "summary": "Get Space Sections",
        "description": "Retrieves all sections within a specific space. Sections are organizational units within spaces that help categorize conversations and content. Requires valid space access permissions.",
        "operationId": "get_space_sections_api_v1_integration_spaces__space_id__sections_get",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Get space sections",
            "source": "curl -X GET 'https://app-be.thesis.io/api/v1/integration/spaces/space_123/sections' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN'"
          },
          {
            "lang": "python",
            "label": "Get space sections",
            "source": "import requests\n\nspace_id = 'space_123'\nurl = f'https://app-be.thesis.io/api/v1/integration/spaces/{space_id}/sections'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Get space sections",
            "source": "const spaceId = 'space_123';\nconst response = await fetch(`https://app-be.thesis.io/api/v1/integration/spaces/${spaceId}/sections`, {\n  method: 'GET',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN'\n  }\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "parameters": [
          {
            "name": "space_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Space Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Space sections retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceSectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openhands__server__routes__integration__space__FastAPIUnauthorizedErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Space not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integration/chat_researchs": {
      "post": {
        "tags": ["conversations", "conversations"],
        "summary": "Thesis.io chat mode with Multi Web Search tool enabled",
        "description": "Creates a new conversation optimized for Fast Multi Web Search.",
        "operationId": "integration_new_chat_conversation_api_v1_integration_chat_researchs_post",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Create chat conversation",
            "source": "curl -X POST 'https://app-be.thesis.io/api/v1/integration/chat_researchs' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"initial_user_msg\": \"Lets have a casual conversation about DeFi\",\n    \"system_prompt\": \"You are a friendly AI assistant who explains complex topics simply\"\n  }'"
          },
          {
            "lang": "python",
            "label": "Create chat conversation",
            "source": "import requests\n\nurl = 'https://app-be.thesis.io/api/v1/integration/chat_researchs'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n}\ndata = {\n    'initial_user_msg': 'Lets have a casual conversation about DeFi',\n    'system_prompt': 'You are a friendly AI assistant who explains complex topics simply'\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Create chat conversation",
            "source": "const response = await fetch('https://app-be.thesis.io/api/v1/integration/chat_researchs', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    initial_user_msg: 'Lets have a casual conversation about DeFi',\n    system_prompt: 'You are a friendly AI assistant who explains complex topics simply'\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatConversationIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid chat request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integration/deep_researchs": {
      "post": {
        "tags": ["conversations", "conversations"],
        "summary": "Thesis.io deep research mode with curated data and customized DeFi tools.",
        "description": "Creates a conversation specifically for DeFi research tasks.",
        "operationId": "integration_new_deep_research_conversation_api_v1_integration_deep_researchs_post",
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "Create deep research conversation",
            "source": "curl -X POST 'https://app-be.thesis.io/api/v1/integration/deep_researchs' \\\n  -H 'Authorization: Bearer YOUR_SPACE_API_TOKEN' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"initial_user_msg\": \"Research the latest developments in DeFi\",\n    \"system_prompt\": \"You are a thorough DeFi researcher who provides comprehensive analysis with citations\"\n  }'"
          },
          {
            "lang": "python",
            "label": "Create deep research conversation",
            "source": "import requests\n\nurl = 'https://app-be.thesis.io/api/v1/integration/deep_researchs'\nheaders = {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n}\ndata = {\n    'initial_user_msg': 'Research the latest developments in DeFi',\n    'system_prompt': 'You are a thorough DeFi researcher who provides comprehensive analysis with citations'\n}\n\nresponse = requests.post(url, headers=headers, json=data)\nprint(response.json())"
          },
          {
            "lang": "typescript",
            "label": "Create deep research conversation",
            "source": "const response = await fetch('https://app-be.thesis.io/api/v1/integration/deep_researchs', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer YOUR_SPACE_API_TOKEN',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    initial_user_msg: 'Research the latest developments in DeFi',\n    system_prompt: 'You are a thorough DeFi researcher who provides comprehensive analysis with citations'\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeepResearchConversationIntegrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deep research conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid deep research request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required for research access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIResourceNotFoundErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPIErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConversationCreateResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Response status, always 'ok' for successful creation",
            "example": "ok"
          },
          "conversation_id": {
            "type": "string",
            "title": "Conversation Id",
            "description": "Unique identifier for the created conversation",
            "example": "conv_abc123def456"
          }
        },
        "type": "object",
        "required": ["status", "conversation_id"],
        "title": "ConversationCreateResponse"
      },
      "ConversationDetailResponse": {
        "properties": {
          "conversation_id": {
            "type": "string",
            "title": "Conversation Id",
            "description": "Unique conversation identifier",
            "example": "conv_abc123def456"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Conversation title",
            "example": "Code Review Session"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Current conversation status",
            "example": "RUNNING"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "ISO timestamp when conversation was created",
            "example": "2024-01-15T10:30:00Z"
          },
          "last_updated_at": {
            "type": "string",
            "title": "Last Updated At",
            "description": "ISO timestamp of last activity",
            "example": "2024-01-15T11:45:00Z"
          },
          "selected_repository": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Selected Repository",
            "description": "Associated repository if any",
            "example": "user/project-repo"
          },
          "research_mode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Research Mode",
            "description": "Research mode used in conversation",
            "example": "deep_research"
          },
          "events": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Events",
            "description": "List of conversation events/messages"
          },
          "final_result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Result",
            "description": "Final result if conversation is completed"
          }
        },
        "type": "object",
        "required": [
          "conversation_id",
          "title",
          "status",
          "created_at",
          "last_updated_at",
          "selected_repository",
          "research_mode"
        ],
        "title": "ConversationDetailResponse"
      },
      "ConversationErrorResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Error status, always 'error' for failures",
            "example": "error"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable error message",
            "example": "Invalid request data or missing required fields"
          },
          "msg_id": {
            "type": "string",
            "title": "Msg Id",
            "description": "Machine-readable error code for categorization",
            "example": "INVALID_REQUEST_DATA"
          }
        },
        "type": "object",
        "required": ["status", "message", "msg_id"],
        "title": "ConversationErrorResponse"
      },
      "CreateChatConversationIntegrationRequest": {
        "properties": {
          "initial_user_msg": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Initial User Msg",
            "description": "Initial message for the chat conversation",
            "example": "Let's have a casual conversation about DeFi"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "System prompt to set the AI's behavior in chat mode",
            "example": "You are a friendly AI assistant who explains complex topics simply"
          }
        },
        "type": "object",
        "title": "CreateChatConversationIntegrationRequest"
      },
      "CreateDeepResearchConversationIntegrationRequest": {
        "properties": {
          "initial_user_msg": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Initial User Msg",
            "description": "Initial research query to begin deep analysis",
            "example": "Research the latest developments in DeFi"
          },
          "mcp_disable": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mcp Disable",
            "description": "MCP tools to disable during deep research"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "System prompt for deep research mode behavior",
            "example": "You are a thorough DeFi researcher who provides comprehensive analysis with citations"
          }
        },
        "type": "object",
        "title": "CreateDeepResearchConversationIntegrationRequest"
      },
      "CreateNewConversationIntegrationRequest": {
        "properties": {
          "initial_user_msg": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Initial User Msg",
            "description": "Initial message to start the conversation",
            "example": "What's the new DeFi meta recently that I can ape in?"
          },
          "research_mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResearchMode"
              },
              {
                "type": "null"
              }
            ],
            "description": "Research mode for the conversation",
            "example": "deep_research"
          },
          "space_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Space Id",
            "description": "Your space ID. You can find it via your created space",
            "example": 123
          },
          "space_section_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Space Section Id",
            "description": "Your space section ID. You can find it via your created space",
            "example": 456
          },
          "thread_follow_up": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thread Follow Up",
            "description": "Thread ID for follow-up conversations",
            "example": 789
          },
          "followup_discover_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Followup Discover Id",
            "description": "Discovery ID for follow-up research",
            "example": "discover_abc123"
          },
          "mcp_disable": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "boolean"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mcp Disable",
            "description": "MCP tools to disable for this conversation"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Prompt",
            "description": "Custom system prompt to guide the AI behavior",
            "example": "You are a DeFi gigachad who's always ahead of the new DeFi meta."
          }
        },
        "type": "object",
        "title": "CreateNewConversationIntegrationRequest"
      },
      "FastAPIErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error details from FastAPI",
            "example": "Internal server error"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "FastAPIErrorResponse"
      },
      "FastAPIResourceNotFoundErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error details from FastAPI",
            "example": "Resource not found"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "FastAPIResourceNotFoundErrorResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "JoinConversationIntegrationRequest": {
        "properties": {
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversation Id",
            "description": "ID of the existing conversation to join",
            "example": "conv_abc123def456"
          },
          "user_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Prompt",
            "description": "Message to send when joining the conversation",
            "example": "Please review the code we discussed earlier"
          },
          "research_mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResearchMode"
              },
              {
                "type": "null"
              }
            ],
            "description": "Research mode to use in the conversation. Must be one of: chat, deep_research, follow_up",
            "example": "deep_research"
          },
          "latest_event_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latest Event Id",
            "description": "ID of the latest event to resume from",
            "example": 123
          },
          "x_device_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "X Device Id",
            "description": "Device ID to use for the conversation",
            "example": "123"
          }
        },
        "type": "object",
        "title": "JoinConversationIntegrationRequest"
      },
      "Member": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Member's unique identifier",
            "example": "1587"
          },
          "spaceId": {
            "type": "string",
            "title": "Spaceid",
            "description": "Space ID",
            "example": "868"
          },
          "userId": {
            "type": "string",
            "title": "Userid",
            "description": "User ID",
            "example": "220"
          },
          "role": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role",
            "description": "Member role",
            "example": 1
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Member status",
            "example": 1
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "Member creation timestamp",
            "example": "2025-09-10T07:51:19.525Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Member update timestamp",
            "example": "2025-09-10T07:51:19.525Z"
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ],
            "description": "User details"
          }
        },
        "type": "object",
        "required": ["id", "spaceId", "userId"],
        "title": "Member"
      },
      "PaginationInfo": {
        "properties": {
          "offset": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Offset",
            "description": "Number of records skipped",
            "example": 0
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "description": "Maximum number of records returned",
            "example": 10
          },
          "total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total",
            "description": "Total number of available records",
            "example": 25
          },
          "has_more": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has More",
            "description": "Whether more records are available",
            "example": true
          }
        },
        "type": "object",
        "title": "PaginationInfo"
      },
      "ResearchMode": {
        "type": "string",
        "enum": ["chat", "deep_research", "follow_up"],
        "title": "ResearchMode"
      },
      "Space": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Space ID",
            "example": "868"
          },
          "userId": {
            "type": "string",
            "title": "Userid",
            "description": "User ID",
            "example": "220"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Space title",
            "example": "New Space"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Space description",
            "example": ""
          },
          "datasetId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datasetid",
            "description": "Dataset ID",
            "example": "1234567890"
          },
          "datasetName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datasetname",
            "description": "Dataset name",
            "example": "220-1234567890"
          },
          "emoji": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Emoji",
            "description": "Space emoji",
            "example": ""
          },
          "customInstruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custominstruction",
            "description": "Custom instruction",
            "example": ""
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Space category",
            "example": "other"
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Space status",
            "example": 1
          },
          "visibility": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Visibility",
            "description": "Space visibility",
            "example": 0
          },
          "memberCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Membercount",
            "description": "Member count",
            "example": 1
          },
          "followerCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Followercount",
            "description": "Follower count",
            "example": 0
          },
          "popularityScore": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Popularityscore",
            "description": "Popularity score",
            "example": 0
          },
          "lastActivityAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastactivityat",
            "description": "Last activity timestamp",
            "example": "2025-09-10T07:51:19.519Z"
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "Creation timestamp",
            "example": "2025-09-10T07:51:19.519Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Update timestamp",
            "example": "2025-09-12T02:21:58.501Z"
          },
          "datasetCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datasetcount",
            "description": "Dataset count",
            "example": 0
          },
          "totalResearch": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Totalresearch",
            "description": "Total research count",
            "example": 2
          },
          "systemPrompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Systemprompt",
            "description": "System prompt",
            "example": ""
          },
          "basicPrompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Basicprompt",
            "description": "Basic prompt",
            "example": ""
          },
          "viewCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Viewcount",
            "description": "View count",
            "example": 7
          },
          "coverUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coverurl",
            "description": "Cover URL",
            "example": "https://pbs.png"
          },
          "uuid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuid",
            "description": "Space UUID",
            "example": "THESISSPACE1234567890"
          },
          "avatarUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatarurl",
            "description": "Avatar URL"
          },
          "social": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Social",
            "description": "Social links"
          },
          "spaceType": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Spacetype",
            "description": "Space type"
          },
          "inCampaign": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Incampaign",
            "description": "In campaign",
            "example": false
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ],
            "description": "User details"
          },
          "telegramGroup": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TelegramGroup"
              },
              {
                "type": "null"
              }
            ],
            "description": "Telegram group"
          }
        },
        "type": "object",
        "required": ["id", "userId"],
        "title": "Space"
      },
      "SpaceDetail": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique space identifier",
            "example": "868"
          },
          "userId": {
            "type": "string",
            "title": "Userid",
            "description": "Owner user ID",
            "example": "220"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Space title",
            "example": "New Space"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Space description",
            "example": ""
          },
          "datasetId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datasetid",
            "description": "Dataset ID",
            "example": "1234567890"
          },
          "datasetName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datasetname",
            "description": "Dataset name",
            "example": "220-1234567890"
          },
          "emoji": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Emoji",
            "description": "Space emoji",
            "example": ""
          },
          "customInstruction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custominstruction",
            "description": "Custom instruction",
            "example": ""
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Space category",
            "example": "other"
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Space status",
            "example": 1
          },
          "visibility": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Visibility",
            "description": "Space visibility",
            "example": 0
          },
          "memberCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Membercount",
            "description": "Number of members",
            "example": 1
          },
          "followerCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Followercount",
            "description": "Number of followers",
            "example": 0
          },
          "popularityScore": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Popularityscore",
            "description": "Popularity score",
            "example": 0
          },
          "lastActivityAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastactivityat",
            "description": "Last activity timestamp",
            "example": "2025-09-10T07:51:19.519Z"
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "Creation timestamp",
            "example": "2025-09-10T07:51:19.519Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Update timestamp",
            "example": "2025-09-12T02:21:58.501Z"
          },
          "datasetCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datasetcount",
            "description": "Dataset count",
            "example": 0
          },
          "totalResearch": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Totalresearch",
            "description": "Total research count",
            "example": 2
          },
          "systemPrompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Systemprompt",
            "description": "System prompt",
            "example": ""
          },
          "basicPrompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Basicprompt",
            "description": "Basic prompt",
            "example": ""
          },
          "viewCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Viewcount",
            "description": "View count",
            "example": 7
          },
          "coverUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coverurl",
            "description": "Cover image URL",
            "example": "https://pbs.png"
          },
          "uuid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuid",
            "description": "Space UUID",
            "example": "THESISSPACE1234567890"
          },
          "avatarUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatarurl",
            "description": "Avatar URL"
          },
          "social": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Social",
            "description": "Social links"
          },
          "spaceType": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Spacetype",
            "description": "Space type"
          },
          "inCampaign": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Incampaign",
            "description": "In campaign status",
            "example": false
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ],
            "description": "User details"
          },
          "member": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Member"
              },
              {
                "type": "null"
              }
            ],
            "description": "Member details"
          },
          "telegramGroupDetail": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TelegramGroupDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Telegram group details"
          },
          "telegramGroup": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Telegramgroup",
            "description": "Telegram group link",
            "example": "https://t.me/+1234567890"
          }
        },
        "type": "object",
        "required": ["id", "userId"],
        "title": "SpaceDetail"
      },
      "SpaceDetailResponse": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SpaceDetail"
              },
              {
                "type": "null"
              }
            ],
            "description": "Complete space information"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Response status message",
            "example": "Get space detail success"
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "SpaceDetailResponse"
      },
      "SpaceErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error details from FastAPI",
            "example": "Invalid request data or missing required fields"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "SpaceErrorResponse"
      },
      "SpaceListItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the member",
            "example": "1587"
          },
          "spaceId": {
            "type": "string",
            "title": "Spaceid",
            "description": "Space ID",
            "example": "868"
          },
          "userId": {
            "type": "string",
            "title": "Userid",
            "description": "User ID",
            "example": "220"
          },
          "role": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role",
            "description": "Member role",
            "example": 1
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Member status",
            "example": 1
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "Creation timestamp",
            "example": "2025-09-10T07:51:19.525Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Update timestamp",
            "example": "2025-09-10T07:51:19.525Z"
          },
          "space": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Space"
              },
              {
                "type": "null"
              }
            ],
            "description": "Space details"
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ],
            "description": "User details"
          }
        },
        "type": "object",
        "required": ["id", "spaceId", "userId"],
        "title": "SpaceListItem"
      },
      "SpaceListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SpaceListItem"
            },
            "type": "array",
            "title": "Data",
            "description": "List of spaces matching the request",
            "default": []
          },
          "pagination": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "Pagination information for the results"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Response status message",
            "example": "Get list spaces success"
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "SpaceListResponse"
      },
      "SpaceSection": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique section identifier",
            "example": "555"
          },
          "spaceId": {
            "type": "string",
            "title": "Spaceid",
            "description": "Space identifier",
            "example": "724"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Section name",
            "example": "Overview"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Section description",
            "example": ""
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "Section prompt",
            "example": "Create a chart..."
          },
          "conversationId": {
            "type": "string",
            "title": "Conversationid",
            "description": "Conversation ID",
            "example": "abc123"
          },
          "outputType": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outputtype",
            "description": "Output type",
            "example": "bar_chart"
          },
          "mcpDisable": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mcpdisable",
            "description": "Disabled MCP services"
          },
          "dataSource": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Datasource",
            "description": "Data sources"
          },
          "x": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "X",
            "description": "X data"
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Section status",
            "example": 1
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "Creation timestamp",
            "example": "2025-08-28T10:30:17.926Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Update timestamp",
            "example": "2025-09-10T11:04:56.465Z"
          },
          "interval": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Interval",
            "description": "Refresh interval"
          },
          "lastRefreshedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastrefreshedat",
            "description": "Last refresh timestamp"
          },
          "autoRefresh": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Autorefresh",
            "description": "Auto refresh enabled",
            "example": false
          }
        },
        "type": "object",
        "required": ["id", "spaceId", "conversationId"],
        "title": "SpaceSection"
      },
      "SpaceSectionsResponse": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SpaceSection"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "List of sections in the space",
            "default": []
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Response status message",
            "example": "Get space sections success"
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "SpaceSectionsResponse"
      },
      "TelegramGroup": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Telegram group ID",
            "example": "180"
          },
          "groupTitle": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grouptitle",
            "description": "Group title",
            "example": "Space new-space-1234567890"
          },
          "groupInviteLink": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Groupinvitelink",
            "description": "Group invite link",
            "example": "https://t.me/+1234567890"
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "Creation timestamp",
            "example": "2025-09-10T07:51:19.527Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Update timestamp",
            "example": "2025-09-10T07:51:20.060Z"
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Group status",
            "example": 1
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "TelegramGroup"
      },
      "TelegramGroupDetail": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Telegram group ID",
            "example": "180"
          },
          "chatId": {
            "type": "string",
            "title": "Chatid",
            "description": "Telegram chat ID",
            "example": "1234567890"
          },
          "spaceId": {
            "type": "string",
            "title": "Spaceid",
            "description": "Space ID",
            "example": "868"
          },
          "groupTitle": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grouptitle",
            "description": "Telegram group title",
            "example": "Space new-space-1234567890"
          },
          "groupInviteLink": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Groupinvitelink",
            "description": "Telegram group invite link",
            "example": "https://t.me/+1234567890"
          },
          "errorMessage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Errormessage",
            "description": "Error message"
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Group status",
            "example": 1
          },
          "verifiedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verifiedat",
            "description": "Verification timestamp",
            "example": "2025-09-10T07:51:20.060Z"
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "Creation timestamp",
            "example": "2025-09-10T07:51:19.527Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Update timestamp",
            "example": "2025-09-10T07:51:20.060Z"
          }
        },
        "type": "object",
        "required": ["id", "chatId", "spaceId"],
        "title": "TelegramGroupDetail"
      },
      "User": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User's unique identifier",
            "example": "220"
          },
          "publicAddress": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Publicaddress",
            "description": "User's public wallet address",
            "example": "0x1234567890"
          },
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username",
            "description": "User's display name",
            "example": "Foo Bar"
          },
          "avatar": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar",
            "description": "User's avatar URL",
            "example": "https://pbs.png"
          },
          "status": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "User status",
            "example": 1
          },
          "whitelisted": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whitelisted",
            "description": "Whitelist status",
            "example": 0
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Createdat",
            "description": "User creation timestamp",
            "example": "2025-07-11T10:18:14.994Z"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "User last update timestamp",
            "example": "2025-09-10T07:22:22.666Z"
          },
          "auth0Id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth0Id",
            "description": "Auth0 ID",
            "example": "twitter|1234567890"
          },
          "twitterUsername": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitterusername",
            "description": "Twitter username",
            "example": "foo_bar"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "User"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "openhands__server__routes__integration__conversation__FastAPIUnauthorizedErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error details from FastAPI",
            "example": "Unauthorized or invalid token"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "FastAPIUnauthorizedErrorResponse"
      },
      "openhands__server__routes__integration__space__FastAPIUnauthorizedErrorResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error details from FastAPI",
            "example": "Unauthorized"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "FastAPIUnauthorizedErrorResponse"
      }
    },
    "securitySchemes": {
      "APIKeyAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your API token in the format: Bearer <your_token_here>"
      }
    }
  },
  "security": [
    {
      "APIKeyAuth": []
    },
    {}
  ],
  "servers": [
    {
      "url": "https://app-be.thesis.io",
      "description": "Production Thesis APIs"
    }
  ]
}
